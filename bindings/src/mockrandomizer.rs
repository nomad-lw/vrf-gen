/**

Generated by the following Solidity interface...
```solidity
interface MockRandomizer {
    function clientBalanceOf(address _client) external view returns (uint256 deposit, uint256 reserved_amount);
    function clientDeposit(address client) external payable;
    function clientWithdrawTo(address to, uint256 amount) external;
    function deposits(address) external view returns (uint256);
    function estimateFee(uint256) external pure returns (uint256);
    function getFeeStats(uint256) external pure returns (uint256[2] memory);
    function getRequest(uint256 request_id) external view returns (bytes32 result, bytes32 dataHash, uint256 ethPaid, uint256 ethRefunded, bytes10[2] memory vrfHashes);
    function request(uint256) external returns (uint256);
    function reserved(address) external view returns (uint256);
    function results(uint256) external view returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "clientBalanceOf",
    "inputs": [
      {
        "name": "_client",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "deposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "reserved_amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "clientDeposit",
    "inputs": [
      {
        "name": "client",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "clientWithdrawTo",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deposits",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "estimateFee",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getFeeStats",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getRequest",
    "inputs": [
      {
        "name": "request_id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "result",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "dataHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "ethPaid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "ethRefunded",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "vrfHashes",
        "type": "bytes10[2]",
        "internalType": "bytes10[2]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "request",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "reserved",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "results",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockRandomizer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346015576104ef908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163127e8e4d14610461575080631b0c27da146104355780632465f8f51461030e5780634ffd2e43146102be5780639dfa24e314610257578063c58343ef146101cf578063d845a4b314610152578063da9425e214610118578063fc7e286d146100de5763fe2877a81461008d57600080fd5b346100d95760203660031901126100d95760406001600160a01b036100b0610481565b168060005260006020528160002054906000526001602052816000205482519182526020820152f35b600080fd5b346100d95760203660031901126100d9576001600160a01b036100ff610481565b1660005260006020526020604060002054604051908152f35b346100d95760203660031901126100d9576001600160a01b03610139610481565b1660005260016020526020604060002054604051908152f35b346100d95760203660031901126100d9576020604051818101904282523360601b604082015260348152610187605482610497565b51902060405182810190693930b73237b6b4bd32b960b11b825282602a820152602a81526101b6604a82610497565b5190208160005260028352604060002055604051908152f35b346100d95760203660031901126100d957604080516101ee8282610497565b813682376004356000526002602052662386f26fc1000082600020549280519384526000602085015283015260006060830152608082016000905b600282106102365760c084f35b82516001600160b01b03191681526020928301926001929092019101610229565b346100d95760203660031901126100d95760408080516102778282610497565b36903780516102868282610497565b81368237662386f26fc1000081528151906000825b600282106102a857505050f35b602080600192855181520193019101909161029b565b60203660031901126100d9576001600160a01b036102da610481565b16600052600060205260406000208054903482018092116102f85755005b634e487b7160e01b600052601160045260246000fd5b346100d95760403660031901126100d957610327610481565b6024359033600052600060205281604060002054106103f95733600052600060205260406000208054908382039182116102f857600093849384938493555af13d156103f4573d67ffffffffffffffff81116103de5760405190610395601f8201601f191660200183610497565b8152600060203d92013e5b156103a757005b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b6103a0565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b346100d95760203660031901126100d95760043560005260026020526020604060002054604051908152f35b346100d95760203660031901126100d95780662386f26fc1000060209252f35b600435906001600160a01b03821682036100d957565b90601f8019910116810190811067ffffffffffffffff8211176103de5760405256fea2646970667358221220d3085c7f7288a70e2ea61115eaf6330935fe667583a129dd423cfc94a27c4fb064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x04\xEF\x90\x81a\0\x1B\x829\xF3[`\0\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x13W`\0\x80\xFD[`\x005`\xE0\x1C\x90\x81c\x12~\x8EM\x14a\x04aWP\x80c\x1B\x0C'\xDA\x14a\x045W\x80c$e\xF8\xF5\x14a\x03\x0EW\x80cO\xFD.C\x14a\x02\xBEW\x80c\x9D\xFA$\xE3\x14a\x02WW\x80c\xC5\x83C\xEF\x14a\x01\xCFW\x80c\xD8E\xA4\xB3\x14a\x01RW\x80c\xDA\x94%\xE2\x14a\x01\x18W\x80c\xFC~(m\x14a\0\xDEWc\xFE(w\xA8\x14a\0\x8DW`\0\x80\xFD[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`@`\x01`\x01`\xA0\x1B\x03a\0\xB0a\x04\x81V[\x16\x80`\0R`\0` R\x81`\0 T\x90`\0R`\x01` R\x81`\0 T\x82Q\x91\x82R` \x82\x01R\xF3[`\0\x80\xFD[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`\x01`\x01`\xA0\x1B\x03a\0\xFFa\x04\x81V[\x16`\0R`\0` R` `@`\0 T`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`\x01`\x01`\xA0\x1B\x03a\x019a\x04\x81V[\x16`\0R`\x01` R` `@`\0 T`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W` `@Q\x81\x81\x01\x90B\x82R3``\x1B`@\x82\x01R`4\x81Ra\x01\x87`T\x82a\x04\x97V[Q\x90 `@Q\x82\x81\x01\x90i90\xB727\xB6\xB4\xBD2\xB9`\xB1\x1B\x82R\x82`*\x82\x01R`*\x81Ra\x01\xB6`J\x82a\x04\x97V[Q\x90 \x81`\0R`\x02\x83R`@`\0 U`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`@\x80Qa\x01\xEE\x82\x82a\x04\x97V[\x816\x827`\x045`\0R`\x02` Rf#\x86\xF2o\xC1\0\0\x82`\0 T\x92\x80Q\x93\x84R`\0` \x85\x01R\x83\x01R`\0``\x83\x01R`\x80\x82\x01`\0\x90[`\x02\x82\x10a\x026W`\xC0\x84\xF3[\x82Q`\x01`\x01`\xB0\x1B\x03\x19\x16\x81R` \x92\x83\x01\x92`\x01\x92\x90\x92\x01\x91\x01a\x02)V[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`@\x80\x80Qa\x02w\x82\x82a\x04\x97V[6\x907\x80Qa\x02\x86\x82\x82a\x04\x97V[\x816\x827f#\x86\xF2o\xC1\0\0\x81R\x81Q\x90`\0\x82[`\x02\x82\x10a\x02\xA8WPPP\xF3[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\x02\x9BV[` 6`\x03\x19\x01\x12a\0\xD9W`\x01`\x01`\xA0\x1B\x03a\x02\xDAa\x04\x81V[\x16`\0R`\0` R`@`\0 \x80T\x904\x82\x01\x80\x92\x11a\x02\xF8WU\0[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[4a\0\xD9W`@6`\x03\x19\x01\x12a\0\xD9Wa\x03'a\x04\x81V[`$5\x903`\0R`\0` R\x81`@`\0 T\x10a\x03\xF9W3`\0R`\0` R`@`\0 \x80T\x90\x83\x82\x03\x91\x82\x11a\x02\xF8W`\0\x93\x84\x93\x84\x93\x84\x93UZ\xF1=\x15a\x03\xF4W=g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xDEW`@Q\x90a\x03\x95`\x1F\x82\x01`\x1F\x19\x16` \x01\x83a\x04\x97V[\x81R`\0` =\x92\x01>[\x15a\x03\xA7W\0[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01Rn\x15\x1C\x98[\x9C\xD9\x99\\\x88\x19\x98Z[\x19Y`\x8A\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[a\x03\xA0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RsInsufficient balance``\x1B`D\x82\x01R`d\x90\xFD[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`\x045`\0R`\x02` R` `@`\0 T`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W\x80f#\x86\xF2o\xC1\0\0` \x92R\xF3[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\0\xD9WV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xDEW`@RV\xFE\xA2dipfsX\"\x12 \xD3\x08\\\x7Fr\x88\xA7\x0E.\xA6\x11\x15\xEA\xF63\t5\xFEfu\x83\xA1)\xDDB<\xFC\x94\xA2|O\xB0dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608080604052600436101561001357600080fd5b60003560e01c908163127e8e4d14610461575080631b0c27da146104355780632465f8f51461030e5780634ffd2e43146102be5780639dfa24e314610257578063c58343ef146101cf578063d845a4b314610152578063da9425e214610118578063fc7e286d146100de5763fe2877a81461008d57600080fd5b346100d95760203660031901126100d95760406001600160a01b036100b0610481565b168060005260006020528160002054906000526001602052816000205482519182526020820152f35b600080fd5b346100d95760203660031901126100d9576001600160a01b036100ff610481565b1660005260006020526020604060002054604051908152f35b346100d95760203660031901126100d9576001600160a01b03610139610481565b1660005260016020526020604060002054604051908152f35b346100d95760203660031901126100d9576020604051818101904282523360601b604082015260348152610187605482610497565b51902060405182810190693930b73237b6b4bd32b960b11b825282602a820152602a81526101b6604a82610497565b5190208160005260028352604060002055604051908152f35b346100d95760203660031901126100d957604080516101ee8282610497565b813682376004356000526002602052662386f26fc1000082600020549280519384526000602085015283015260006060830152608082016000905b600282106102365760c084f35b82516001600160b01b03191681526020928301926001929092019101610229565b346100d95760203660031901126100d95760408080516102778282610497565b36903780516102868282610497565b81368237662386f26fc1000081528151906000825b600282106102a857505050f35b602080600192855181520193019101909161029b565b60203660031901126100d9576001600160a01b036102da610481565b16600052600060205260406000208054903482018092116102f85755005b634e487b7160e01b600052601160045260246000fd5b346100d95760403660031901126100d957610327610481565b6024359033600052600060205281604060002054106103f95733600052600060205260406000208054908382039182116102f857600093849384938493555af13d156103f4573d67ffffffffffffffff81116103de5760405190610395601f8201601f191660200183610497565b8152600060203d92013e5b156103a757005b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b6103a0565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b346100d95760203660031901126100d95760043560005260026020526020604060002054604051908152f35b346100d95760203660031901126100d95780662386f26fc1000060209252f35b600435906001600160a01b03821682036100d957565b90601f8019910116810190811067ffffffffffffffff8211176103de5760405256fea2646970667358221220d3085c7f7288a70e2ea61115eaf6330935fe667583a129dd423cfc94a27c4fb064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x13W`\0\x80\xFD[`\x005`\xE0\x1C\x90\x81c\x12~\x8EM\x14a\x04aWP\x80c\x1B\x0C'\xDA\x14a\x045W\x80c$e\xF8\xF5\x14a\x03\x0EW\x80cO\xFD.C\x14a\x02\xBEW\x80c\x9D\xFA$\xE3\x14a\x02WW\x80c\xC5\x83C\xEF\x14a\x01\xCFW\x80c\xD8E\xA4\xB3\x14a\x01RW\x80c\xDA\x94%\xE2\x14a\x01\x18W\x80c\xFC~(m\x14a\0\xDEWc\xFE(w\xA8\x14a\0\x8DW`\0\x80\xFD[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`@`\x01`\x01`\xA0\x1B\x03a\0\xB0a\x04\x81V[\x16\x80`\0R`\0` R\x81`\0 T\x90`\0R`\x01` R\x81`\0 T\x82Q\x91\x82R` \x82\x01R\xF3[`\0\x80\xFD[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`\x01`\x01`\xA0\x1B\x03a\0\xFFa\x04\x81V[\x16`\0R`\0` R` `@`\0 T`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`\x01`\x01`\xA0\x1B\x03a\x019a\x04\x81V[\x16`\0R`\x01` R` `@`\0 T`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W` `@Q\x81\x81\x01\x90B\x82R3``\x1B`@\x82\x01R`4\x81Ra\x01\x87`T\x82a\x04\x97V[Q\x90 `@Q\x82\x81\x01\x90i90\xB727\xB6\xB4\xBD2\xB9`\xB1\x1B\x82R\x82`*\x82\x01R`*\x81Ra\x01\xB6`J\x82a\x04\x97V[Q\x90 \x81`\0R`\x02\x83R`@`\0 U`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`@\x80Qa\x01\xEE\x82\x82a\x04\x97V[\x816\x827`\x045`\0R`\x02` Rf#\x86\xF2o\xC1\0\0\x82`\0 T\x92\x80Q\x93\x84R`\0` \x85\x01R\x83\x01R`\0``\x83\x01R`\x80\x82\x01`\0\x90[`\x02\x82\x10a\x026W`\xC0\x84\xF3[\x82Q`\x01`\x01`\xB0\x1B\x03\x19\x16\x81R` \x92\x83\x01\x92`\x01\x92\x90\x92\x01\x91\x01a\x02)V[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`@\x80\x80Qa\x02w\x82\x82a\x04\x97V[6\x907\x80Qa\x02\x86\x82\x82a\x04\x97V[\x816\x827f#\x86\xF2o\xC1\0\0\x81R\x81Q\x90`\0\x82[`\x02\x82\x10a\x02\xA8WPPP\xF3[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\x02\x9BV[` 6`\x03\x19\x01\x12a\0\xD9W`\x01`\x01`\xA0\x1B\x03a\x02\xDAa\x04\x81V[\x16`\0R`\0` R`@`\0 \x80T\x904\x82\x01\x80\x92\x11a\x02\xF8WU\0[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[4a\0\xD9W`@6`\x03\x19\x01\x12a\0\xD9Wa\x03'a\x04\x81V[`$5\x903`\0R`\0` R\x81`@`\0 T\x10a\x03\xF9W3`\0R`\0` R`@`\0 \x80T\x90\x83\x82\x03\x91\x82\x11a\x02\xF8W`\0\x93\x84\x93\x84\x93\x84\x93UZ\xF1=\x15a\x03\xF4W=g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xDEW`@Q\x90a\x03\x95`\x1F\x82\x01`\x1F\x19\x16` \x01\x83a\x04\x97V[\x81R`\0` =\x92\x01>[\x15a\x03\xA7W\0[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01Rn\x15\x1C\x98[\x9C\xD9\x99\\\x88\x19\x98Z[\x19Y`\x8A\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[a\x03\xA0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RsInsufficient balance``\x1B`D\x82\x01R`d\x90\xFD[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W`\x045`\0R`\x02` R` `@`\0 T`@Q\x90\x81R\xF3[4a\0\xD9W` 6`\x03\x19\x01\x12a\0\xD9W\x80f#\x86\xF2o\xC1\0\0` \x92R\xF3[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\0\xD9WV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xDEW`@RV\xFE\xA2dipfsX\"\x12 \xD3\x08\\\x7Fr\x88\xA7\x0E.\xA6\x11\x15\xEA\xF63\t5\xFEfu\x83\xA1)\xDDB<\xFC\x94\xA2|O\xB0dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `clientBalanceOf(address)` and selector `0xfe2877a8`.
```solidity
function clientBalanceOf(address _client) external view returns (uint256 deposit, uint256 reserved_amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clientBalanceOfCall {
        #[allow(missing_docs)]
        pub _client: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`clientBalanceOf(address)`](clientBalanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clientBalanceOfReturn {
        #[allow(missing_docs)]
        pub deposit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub reserved_amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clientBalanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: clientBalanceOfCall) -> Self {
                    (value._client,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clientBalanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _client: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clientBalanceOfReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: clientBalanceOfReturn) -> Self {
                    (value.deposit, value.reserved_amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for clientBalanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deposit: tuple.0,
                        reserved_amount: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for clientBalanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = clientBalanceOfReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "clientBalanceOf(address)";
            const SELECTOR: [u8; 4] = [254u8, 40u8, 119u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._client,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `clientDeposit(address)` and selector `0x4ffd2e43`.
```solidity
function clientDeposit(address client) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clientDepositCall {
        #[allow(missing_docs)]
        pub client: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`clientDeposit(address)`](clientDepositCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clientDepositReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clientDepositCall> for UnderlyingRustTuple<'_> {
                fn from(value: clientDepositCall) -> Self {
                    (value.client,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clientDepositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { client: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clientDepositReturn> for UnderlyingRustTuple<'_> {
                fn from(value: clientDepositReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clientDepositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for clientDepositCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = clientDepositReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "clientDeposit(address)";
            const SELECTOR: [u8; 4] = [79u8, 253u8, 46u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.client,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `clientWithdrawTo(address,uint256)` and selector `0x2465f8f5`.
```solidity
function clientWithdrawTo(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clientWithdrawToCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`clientWithdrawTo(address,uint256)`](clientWithdrawToCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clientWithdrawToReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clientWithdrawToCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: clientWithdrawToCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for clientWithdrawToCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clientWithdrawToReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: clientWithdrawToReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for clientWithdrawToReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for clientWithdrawToCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = clientWithdrawToReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "clientWithdrawTo(address,uint256)";
            const SELECTOR: [u8; 4] = [36u8, 101u8, 248u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `deposits(address)` and selector `0xfc7e286d`.
```solidity
function deposits(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`deposits(address)`](depositsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositsCall> for UnderlyingRustTuple<'_> {
                fn from(value: depositsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: depositsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for depositsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = depositsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deposits(address)";
            const SELECTOR: [u8; 4] = [252u8, 126u8, 40u8, 109u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `estimateFee(uint256)` and selector `0x127e8e4d`.
```solidity
function estimateFee(uint256) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct estimateFeeCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`estimateFee(uint256)`](estimateFeeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct estimateFeeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<estimateFeeCall> for UnderlyingRustTuple<'_> {
                fn from(value: estimateFeeCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for estimateFeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<estimateFeeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: estimateFeeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for estimateFeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for estimateFeeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = estimateFeeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "estimateFee(uint256)";
            const SELECTOR: [u8; 4] = [18u8, 126u8, 142u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getFeeStats(uint256)` and selector `0x9dfa24e3`.
```solidity
function getFeeStats(uint256) external pure returns (uint256[2] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFeeStatsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getFeeStats(uint256)`](getFeeStatsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFeeStatsReturn {
        #[allow(missing_docs)]
        pub _0: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFeeStatsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getFeeStatsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getFeeStatsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFeeStatsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getFeeStatsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getFeeStatsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getFeeStatsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getFeeStatsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getFeeStats(uint256)";
            const SELECTOR: [u8; 4] = [157u8, 250u8, 36u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRequest(uint256)` and selector `0xc58343ef`.
```solidity
function getRequest(uint256 request_id) external view returns (bytes32 result, bytes32 dataHash, uint256 ethPaid, uint256 ethRefunded, bytes10[2] memory vrfHashes);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRequestCall {
        #[allow(missing_docs)]
        pub request_id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getRequest(uint256)`](getRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRequestReturn {
        #[allow(missing_docs)]
        pub result: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub dataHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub ethPaid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub ethRefunded: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub vrfHashes: [alloy::sol_types::private::FixedBytes<10>; 2usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRequestCall) -> Self {
                    (value.request_id,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { request_id: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::FixedBytes<10>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                [alloy::sol_types::private::FixedBytes<10>; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRequestReturn) -> Self {
                    (
                        value.result,
                        value.dataHash,
                        value.ethPaid,
                        value.ethRefunded,
                        value.vrfHashes,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        result: tuple.0,
                        dataHash: tuple.1,
                        ethPaid: tuple.2,
                        ethRefunded: tuple.3,
                        vrfHashes: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRequestReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::FixedBytes<10>,
                    2usize,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRequest(uint256)";
            const SELECTOR: [u8; 4] = [197u8, 131u8, 67u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.request_id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `request(uint256)` and selector `0xd845a4b3`.
```solidity
function request(uint256) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requestCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`request(uint256)`](requestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requestReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requestCall> for UnderlyingRustTuple<'_> {
                fn from(value: requestCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: requestReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requestReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "request(uint256)";
            const SELECTOR: [u8; 4] = [216u8, 69u8, 164u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `reserved(address)` and selector `0xda9425e2`.
```solidity
function reserved(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct reservedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`reserved(address)`](reservedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct reservedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<reservedCall> for UnderlyingRustTuple<'_> {
                fn from(value: reservedCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for reservedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<reservedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: reservedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for reservedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for reservedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = reservedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "reserved(address)";
            const SELECTOR: [u8; 4] = [218u8, 148u8, 37u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `results(uint256)` and selector `0x1b0c27da`.
```solidity
function results(uint256) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resultsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`results(uint256)`](resultsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resultsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resultsCall> for UnderlyingRustTuple<'_> {
                fn from(value: resultsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for resultsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resultsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: resultsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for resultsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for resultsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = resultsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "results(uint256)";
            const SELECTOR: [u8; 4] = [27u8, 12u8, 39u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockRandomizer`](self) function calls.
    pub enum MockRandomizerCalls {
        #[allow(missing_docs)]
        clientBalanceOf(clientBalanceOfCall),
        #[allow(missing_docs)]
        clientDeposit(clientDepositCall),
        #[allow(missing_docs)]
        clientWithdrawTo(clientWithdrawToCall),
        #[allow(missing_docs)]
        deposits(depositsCall),
        #[allow(missing_docs)]
        estimateFee(estimateFeeCall),
        #[allow(missing_docs)]
        getFeeStats(getFeeStatsCall),
        #[allow(missing_docs)]
        getRequest(getRequestCall),
        #[allow(missing_docs)]
        request(requestCall),
        #[allow(missing_docs)]
        reserved(reservedCall),
        #[allow(missing_docs)]
        results(resultsCall),
    }
    #[automatically_derived]
    impl MockRandomizerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [18u8, 126u8, 142u8, 77u8],
            [27u8, 12u8, 39u8, 218u8],
            [36u8, 101u8, 248u8, 245u8],
            [79u8, 253u8, 46u8, 67u8],
            [157u8, 250u8, 36u8, 227u8],
            [197u8, 131u8, 67u8, 239u8],
            [216u8, 69u8, 164u8, 179u8],
            [218u8, 148u8, 37u8, 226u8],
            [252u8, 126u8, 40u8, 109u8],
            [254u8, 40u8, 119u8, 168u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockRandomizerCalls {
        const NAME: &'static str = "MockRandomizerCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::clientBalanceOf(_) => {
                    <clientBalanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::clientDeposit(_) => {
                    <clientDepositCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::clientWithdrawTo(_) => {
                    <clientWithdrawToCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deposits(_) => <depositsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::estimateFee(_) => {
                    <estimateFeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getFeeStats(_) => {
                    <getFeeStatsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRequest(_) => {
                    <getRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::request(_) => <requestCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::reserved(_) => <reservedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::results(_) => <resultsCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockRandomizerCalls>] = &[
                {
                    fn estimateFee(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <estimateFeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::estimateFee)
                    }
                    estimateFee
                },
                {
                    fn results(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <resultsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::results)
                    }
                    results
                },
                {
                    fn clientWithdrawTo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <clientWithdrawToCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::clientWithdrawTo)
                    }
                    clientWithdrawTo
                },
                {
                    fn clientDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <clientDepositCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::clientDeposit)
                    }
                    clientDeposit
                },
                {
                    fn getFeeStats(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <getFeeStatsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::getFeeStats)
                    }
                    getFeeStats
                },
                {
                    fn getRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <getRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::getRequest)
                    }
                    getRequest
                },
                {
                    fn request(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <requestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::request)
                    }
                    request
                },
                {
                    fn reserved(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <reservedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::reserved)
                    }
                    reserved
                },
                {
                    fn deposits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <depositsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::deposits)
                    }
                    deposits
                },
                {
                    fn clientBalanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockRandomizerCalls> {
                        <clientBalanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockRandomizerCalls::clientBalanceOf)
                    }
                    clientBalanceOf
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::clientBalanceOf(inner) => {
                    <clientBalanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::clientDeposit(inner) => {
                    <clientDepositCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::clientWithdrawTo(inner) => {
                    <clientWithdrawToCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deposits(inner) => {
                    <depositsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::estimateFee(inner) => {
                    <estimateFeeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getFeeStats(inner) => {
                    <getFeeStatsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRequest(inner) => {
                    <getRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::request(inner) => {
                    <requestCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::reserved(inner) => {
                    <reservedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::results(inner) => {
                    <resultsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::clientBalanceOf(inner) => {
                    <clientBalanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::clientDeposit(inner) => {
                    <clientDepositCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::clientWithdrawTo(inner) => {
                    <clientWithdrawToCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deposits(inner) => {
                    <depositsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::estimateFee(inner) => {
                    <estimateFeeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getFeeStats(inner) => {
                    <getFeeStatsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRequest(inner) => {
                    <getRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::request(inner) => {
                    <requestCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::reserved(inner) => {
                    <reservedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::results(inner) => {
                    <resultsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockRandomizer`](self) contract instance.

See the [wrapper's documentation](`MockRandomizerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockRandomizerInstance<T, P, N> {
        MockRandomizerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockRandomizerInstance<T, P, N>>,
    > {
        MockRandomizerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockRandomizerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockRandomizer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockRandomizer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockRandomizerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockRandomizerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockRandomizerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockRandomizerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockRandomizer`](self) contract instance.

See the [wrapper's documentation](`MockRandomizerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockRandomizerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockRandomizerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockRandomizerInstance<T, P, N> {
            MockRandomizerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockRandomizerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`clientBalanceOf`] function.
        pub fn clientBalanceOf(
            &self,
            _client: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, clientBalanceOfCall, N> {
            self.call_builder(&clientBalanceOfCall { _client })
        }
        ///Creates a new call builder for the [`clientDeposit`] function.
        pub fn clientDeposit(
            &self,
            client: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, clientDepositCall, N> {
            self.call_builder(&clientDepositCall { client })
        }
        ///Creates a new call builder for the [`clientWithdrawTo`] function.
        pub fn clientWithdrawTo(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, clientWithdrawToCall, N> {
            self.call_builder(&clientWithdrawToCall { to, amount })
        }
        ///Creates a new call builder for the [`deposits`] function.
        pub fn deposits(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, depositsCall, N> {
            self.call_builder(&depositsCall { _0 })
        }
        ///Creates a new call builder for the [`estimateFee`] function.
        pub fn estimateFee(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, estimateFeeCall, N> {
            self.call_builder(&estimateFeeCall { _0 })
        }
        ///Creates a new call builder for the [`getFeeStats`] function.
        pub fn getFeeStats(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getFeeStatsCall, N> {
            self.call_builder(&getFeeStatsCall { _0 })
        }
        ///Creates a new call builder for the [`getRequest`] function.
        pub fn getRequest(
            &self,
            request_id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRequestCall, N> {
            self.call_builder(&getRequestCall { request_id })
        }
        ///Creates a new call builder for the [`request`] function.
        pub fn request(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, requestCall, N> {
            self.call_builder(&requestCall { _0 })
        }
        ///Creates a new call builder for the [`reserved`] function.
        pub fn reserved(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, reservedCall, N> {
            self.call_builder(&reservedCall { _0 })
        }
        ///Creates a new call builder for the [`results`] function.
        pub fn results(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, resultsCall, N> {
            self.call_builder(&resultsCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockRandomizerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
